// JS included everywhere

let filesDataTable

const isAndroid = typeof Android !== 'undefined'

document.addEventListener('DOMContentLoaded', domContentLoaded)
document
    .querySelectorAll('[data-bs-toggle="popover"]')
    .forEach((el) => new bootstrap.Popover(el))
document
    .querySelectorAll('[data-bs-toggle="tooltip"]')
    .forEach((el) => new bootstrap.Tooltip(el))

const backToTop = document.getElementById('back-to-top')
if (backToTop) {
    window.addEventListener('scroll', debounce(onScroll))
    backToTop.addEventListener('click', () => {
        document.body.scrollTop = 0
        document.documentElement.scrollTop = 0
    })
}

if (typeof ClipboardJS !== 'undefined') {
    new ClipboardJS('.clip')
    $('.clip').on('click', function () {
        const el = $(this)
        el.popover({
            content: 'Copied',
            placement: 'bottom',
            trigger: 'manual',
        })
        el.popover('show')
        setTimeout(function () {
            el.popover('hide')
        }, 2000)
        $(document).on('click', function (e) {
            if (!el.is(e.target) && el.has(e.target).length === 0) {
                el.popover('hide')
            }
        })
    })
}

$('.form-control').on('focus change input', function () {
    $(this).removeClass('is-invalid')
})

/**
 * Initialize Document
 * @function domContentLoaded
 */
function domContentLoaded() {
    // Show any toast generated by template on load
    $('.toast-alert').each(function () {
        if (isAndroid && Android.showToast) {
            Android.showToast(this.querySelector('.toast-body').textContent)
        } else {
            const toastAlert = new bootstrap.Toast($(this))
            toastAlert.show()
        }
    })
    if (isAndroid) {
        console.log('Android Detected.')
        if (Android.receiveAuthToken) {
            setTimeout(getAuthToken, 250)
        }
        //if (Android.receiveStats) {
        //    const statsForm = document.getElementById('stats-form')
        //    if (statsForm) {
        //        console.log('Android.receiveStats: ', statsForm)
        //        Android.receiveStats(
        //            statsForm.elements?.statFiles.value,
        //            statsForm.elements?.statSize.value,
        //            statsForm.elements?.statHuman.value,
        //            statsForm.elements?.statShorts.value
        //        )
        //    }
        //}
    }
}

function getAuthToken() {
    const authToken = document.getElementById('auth-token').value
    console.log('getAuthToken: authToken:', authToken)
    Android.receiveAuthToken(authToken)
}

/**
 * On Scroll Callback
 * @function onScroll
 */
function onScroll() {
    if (
        document.body.scrollTop > 20 ||
        document.documentElement.scrollTop > 20
    ) {
        backToTop.style.display = 'block'
    } else {
        backToTop.style.display = 'none'
    }
}

/**
 * Show Bootstrap Toast
 * @function showToast
 * @param {String} message
 * @param {String} bsClass
 * @param {String} delay
 */
function show_toast(message, bsClass = 'success', delay = '6000') {
    // console.debug(`show_toast: ${message}`)
    if (isAndroid && Android.showToast) {
        console.log('Android Toast')
        Android.showToast(message)
        return
    }

    let element = $('#toast').clone()
    element.removeAttr('id').addClass(`text-bg-${bsClass}`)
    element.find('.toast-body').text(message)
    element.toast({ delay: parseInt(delay) })
    element.appendTo('.toast-container').toast('show')
}

/**
 * Save Options
 * @function saveOptions
 * @param {InputEvent} event
 */
function saveOptions(event) {
    const excludes = ['data-bs-theme-value']
    if (excludes.includes(event.target.id)) {
        return console.debug('ignored setting:', event.target.id)
    }
    console.debug(`saveOptions: ${event.type}`, event)
    const form = $(this)
    const data = new FormData(this)
    // console.debug('data:', data)
    $.ajax({
        type: 'post',
        url: window.location.pathname,
        data: data,
        headers: { 'X-CSRFToken': csrftoken },
        success: success,
        error: error,
        cache: false,
        contentType: false,
        processData: false,
    })
    function error(jqXHR) {
        formErrorHandler.call(this, form, jqXHR)
    }
    function success(data) {
        console.debug('success:', data, event)
        if (data.reload) {
            location.reload()
        } else {
            // let message = 'Settings Saved Successfully.'
            // show_toast(message, 'success')
            // TODO: Improve handling for other types and add to this if
            if (event.target.type === 'text') {
                event.target.classList.add('is-valid')
                setTimeout(
                    () => event.target.classList.remove('is-valid'),
                    3000
                )
            }
        }
    }
}

/**
 * Error Message responseJSON.error or jqXHR.statusText
 * @param {jQuery.jqXHR} jqXHR
 */
function messageErrorHandler(jqXHR) {
    if (jqXHR.responseJSON?.error) {
        const message = `${jqXHR.status}: ${jqXHR.responseJSON.error}`
        show_toast(message, 'danger')
    } else {
        const message = `${jqXHR.status}: ${jqXHR.statusText}`
        show_toast(message, 'danger')
    }
}

/**
 * Loop through form errors and display them
 * formErrorHandler.call(this, form, jqXHR)
 * @param {jQuery} form
 * @param {jQuery.jqXHR} jqXHR
 */
function formErrorHandler(form, jqXHR) {
    if (jqXHR.status === 400) {
        let data = jqXHR.responseJSON
        console.log('jqXHR.responseJSON data:', data)
        $(form.prop('elements')).each(function () {
            if (Object.hasOwn(data, this.name)) {
                $(`#${this.name}-invalid`).empty().append(data[this.name])
                $(this).addClass('is-invalid')
            }
        })
    }
    const message = `${jqXHR.status}: ${jqXHR.statusText}`
    show_toast(message, 'danger')
}

/**
 * Debounce Function
 * @function debounce
 * @param {Function} fn
 * @param {Number} timeout
 */
function debounce(fn, timeout = 250) {
    let timeoutID
    return (...args) => {
        clearTimeout(timeoutID)
        timeoutID = setTimeout(() => fn(...args), timeout)
    }
}

/**
 * Paginated onScroll Callback
 * @function pageScroll
 * @param {Event} event
 * @param {Number} buffer
 * @param {Function} callable (async)
 */
async function pageScroll(event, nextPage, callable, buffer = 500) {
    // await sleep(200)
    const maxScrollY = document.body.scrollHeight - window.innerHeight
    console.debug(
        `pageScroll: ${window.scrollY} > ${maxScrollY - buffer}`,
        window.scrollY > maxScrollY - buffer
    )
    if (nextPage && (!maxScrollY || window.scrollY > maxScrollY - buffer)) {
        console.debug('End of Scroll')
        await callable()
    }
}

/**
 * Generate Random String at length
 * @param {Number} length
 * @return {String}
 */
function genRand(length) {
    const chars =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
    let result = ''
    let counter = 0
    while (counter < length) {
        const rand = Math.floor(Math.random() * chars.length)
        result += chars.charAt(rand)
        counter += 1
    }
    return result
}

$('#password-unmask').on('click', function (event) {
    console.log('#password-unmask click:', event)
    const input = $('#password')
    const type = input.attr('type') === 'password' ? 'text' : 'password'
    input.prop('type', type)
})

$('#password-copy').on('click', async function (event) {
    console.log('#password-copy click:', event)
    const text = $('#password').val()
    if (text) {
        await navigator.clipboard.writeText(text)
        show_toast('Password copied.', 'info')
    } else {
        show_toast('Empty Password!', 'warning')
    }
})

$('#password-generate').on('click', async function (event) {
    console.log('#password-generate click:', event)
    const password = genRand(12)
    $('#password').val(password)
    await navigator.clipboard.writeText(password)
    show_toast('Password generated and copied!', 'info')
})
