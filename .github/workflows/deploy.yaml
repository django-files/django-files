name: Deploy

on:
  push:
    branches-ignore:
      - 'master'
  workflow_dispatch:
    inputs:
      envs:
        required: false
        default: "dev,dev3"
        type: string

env:
  REGISTRY_GROUP: shane
  REGISTRY_HOST: registry.hosted-domains.com
  COMPOSE_FILE: docker-compose-swarm.yaml
  CONFIG_FILE: settings.env
  #  SERVICE_CONFIGS: hosted-domains/service-configs
  SERVICE_CONFIGS: git@github.com:hosted-domains/service-configs.git
  CONFIGS_DIR: service-configs

  ENV_NAMES: ${{ inputs.envs || 'dev,dev3' }}
  REPOSITORY_NAME: ${{ github.event.repository.name }}
#  ENV_NAME: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}

jobs:
  deploy:
    name: Stack Deploy
    runs-on: self-hosted
    timeout-minutes: 15
    if: ${{ !contains(github.event.head_commit.message, '#nodep') }}

    steps:
      - name: "Variables"
        id: vars
        run: |
          echo GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}
          echo GITHUB_REPOSITORY_OWNER: ${GITHUB_REPOSITORY_OWNER}
          echo REPOSITORY_NAME: ${REPOSITORY_NAME}
          echo ENV_NAMES: ${ENV_NAMES}
          echo REGISTRY_GROUP: ${REGISTRY_GROUP}
          echo REGISTRY_HOST: ${REGISTRY_HOST}
          echo COMPOSE_FILE: ${COMPOSE_FILE}
          echo SERVICE_CONFIGS: ${SERVICE_CONFIGS}
          echo CONFIG_FILE: ${CONFIG_FILE}
#          echo ENV_NAME: ${ENV_NAME}
#          echo TRAEFIK_HOST: ${TRAEFIK_HOST}
#          echo ----------
#          echo "config_path=services/${GITHUB_REPOSITORY}/${ENV_NAME}/${CONFIG_FILE}" >> "$GITHUB_OUTPUT"
#          echo "stack_name=${ENV_NAME}_${GITHUB_REPOSITORY/\//_}" >> "$GITHUB_OUTPUT"

      - name: "Checkout Repository"
        uses: actions/checkout@v3

      - name: "Checkout Service Configs"
        run: |
          echo "${{ secrets.SERVICE_CONFIGS_KEY }}" > ./.ssh_key
          chmod 0600 ./.ssh_key
          mkdir ${CONFIGS_DIR}
          cd ${CONFIGS_DIR}
          git init
          git config core.sshCommand "ssh -i ../.ssh_key -o IdentitiesOnly=yes -o StrictHostKeyChecking=no"
          git remote add origin ${SERVICE_CONFIGS}
          git config core.sparseCheckout true
          IFS=','
          echo ENV_NAMES ${ENV_NAMES}
          for ENV_NAME in ${ENV_NAMES}; do
            echo "services/${GITHUB_REPOSITORY}/${ENV_NAME}/${CONFIG_FILE}"
            echo "services/${GITHUB_REPOSITORY}/${ENV_NAME}/${CONFIG_FILE}" >> .git/info/sparse-checkout
          done
          git pull origin master

#      - name: "Checkout Service Configs"
#        uses: actions/checkout@v3
#        with:
#          repository: ${{ env.SERVICE_CONFIGS }}
#          ref: master
#          path: service-configs
#          sparse-checkout: |
#            services/$${ vars.GITHUB_REPOSITORY }}/dev/$${CONFIG_FILE}
#          sparse-checkout-cone-mode: false
#          ssh-key: ${{ secrets.SERVICE_CONFIGS_KEY }}

#      - name: "Debug"
#        run: |
#          echo ----------
#          ls -lah .
#          echo ----------
#          ls -lhR service-configs
#          echo ----------
#          echo steps.vars.outputs.config_path: ${{ steps.vars.outputs.config_path }}
#          echo steps.vars.outputs.stack_name: ${{ steps.vars.outputs.stack_name }}

#      - name: "Update Compose"
#        run: |
#          sed -i "s/STACK_NAME/${{ steps.vars.outputs.stack_name }}/g" "${COMPOSE_FILE}"
#          cat ${COMPOSE_FILE}

      - name: "Update Compose"
        run: |
          IFS=','
          echo ENV_NAMES ${ENV_NAMES}
          echo ----------
          for ENV_NAME in ${ENV_NAMES}; do
            export STACK_NAME="${ENV_NAME}_${GITHUB_REPOSITORY_OWNER}_${REPOSITORY_NAME}"
            echo STACK_NAME ${STACK_NAME}
            echo COMPOSE_FILE ${COMPOSE_FILE}
            export STACK_COMPOSE="docker-compose-deploy-${ENV_NAME}.yaml"
            echo STACK_COMPOSE ${STACK_COMPOSE}
            stat "${COMPOSE_FILE}"
            cp -f "${COMPOSE_FILE}" "${STACK_COMPOSE}"
            sed -i "s/STACK_NAME/${STACK_NAME}/g" "${STACK_COMPOSE}"
            echo ----------
            cat "${STACK_COMPOSE}"
          done

      - name: "Setup Node 18"
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: "Node Install"
        run: npm install

      - name: "Build Push Deploy"
        run: |
          docker login --username "${{ secrets.REGISTRY_USER }}" --password "${{ secrets.REGISTRY_PASS }}" ${REGISTRY_HOST}
          IFS=','
          echo ENV_NAMES ${ENV_NAMES}
          for ENV_NAME in ${ENV_NAMES}; do
            echo ENV_NAME ${ENV_NAME}
            export ENV_FILE="${CONFIGS_DIR}/services/${GITHUB_REPOSITORY}/${ENV_NAME}/${CONFIG_FILE}"
            echo ENV_FILE ${ENV_FILE}
            stat ${ENV_FILE}
            set -a; . ${ENV_FILE}
            echo TRAEFIK_HOST ${TRAEFIK_HOST}
            export VERSION="${ENV_NAME}"
            echo VERSION ${VERSION}
            export STACK_NAME="${ENV_NAME}_${GITHUB_REPOSITORY_OWNER}_${REPOSITORY_NAME}"
            echo STACK_NAME ${STACK_NAME}
            export STACK_COMPOSE="docker-compose-deploy-${ENV_NAME}.yaml"
            echo STACK_COMPOSE ${STACK_COMPOSE}
            echo ----------
            echo docker compose -f ${STACK_COMPOSE} build --force-rm
            echo docker compose -f ${STACK_COMPOSE} push
            echo docker stack deploy -c ${STACK_COMPOSE} --with-registry-auth --resolve-image always ${STACK_NAME}
          done

#          export ENV_FILE=service-configs/${{ steps.vars.outputs.config_path }}
#          export VERSION=${GITHUB_REF_NAME}
#          echo ----------
#          echo ENV_FILE: ${ENV_FILE}
#          echo VERSION: ${VERSION}
#          echo ----------
#          echo REGISTRY_GROUP: ${REGISTRY_GROUP}
#          echo REGISTRY_HOST: ${REGISTRY_HOST}
#          echo TRAEFIK_HOST: ${TRAEFIK_HOST}
#          echo ENV_NAME: ${ENV_NAME}
#          echo ----------
#          docker compose -f ${COMPOSE_FILE} build --force-rm
#
#          docker login --username '${{ secrets.REGISTRY_USER }}' --password '${{ secrets.REGISTRY_PASS }}' ${REGISTRY_HOST}
#          docker compose -f ${COMPOSE_FILE} push
#
#          docker stack deploy -c ${COMPOSE_FILE} --with-registry-auth --resolve-image always ${{ steps.vars.outputs.stack_name }}
