name: "Dev CI"

on:
  workflow_dispatch:
  #  inputs:
  #    TAG:
  #      description: "Tag to Deploy"
  #      type: string
  #      required: true
  #      default: "dev"
  #    CLEANUP:
  #      description: "Run Cleanup"
  #      type: boolean
  #      required: true
  #      default: true
  push:
    branches-ignore:
      - master

env:
  COMPOSE_FILE: docker-compose-swarm.yaml
  CONFIG_FILE: settings.env
  CONFIGS_DIR: service-configs

#secrets:
#  SERVICE_CONFIGS_KEY:
#  GHCR_USER:
#  GHCR_PASS:
#  PORTAINER_URL:
#  PORTAINER_TOKEN:
#  CLOUDFLARE_API_TOKEN:

jobs:
  verify:
    name: "Verify"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    if: ${{ !contains(github.event.head_commit.message, '#noci') }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Flake8"
        working-directory: app
        run: |
          flake8

  build:
    name: "Build"
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: verify
    permissions:
      contents: read
      packages: write

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Docker Login"
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PASS }}

      - name: "Setup Buildx"
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      #- name: "Build and Push"
      #  uses: docker/build-push-action@v4
      #  with:
      #    context: .
      #    platforms: linux/amd64,linux/arm64
      #    push: true
      #    tags: ${{ steps.tags.outputs.tags }}

      - name: "Bake and Push"
        uses: docker/bake-action@v5
        with:
          files: docker-bake.json
          push: true
          set: |
            app.tags=ghcr.io/django-files/django-files-app:${{ env.GITHUB_REF_NAME }}
            nginx.tags=ghcr.io/django-files/django-files-nginx:${{ env.GITHUB_REF_NAME }}
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max

  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: build
    if: ${{ !contains(github.event.head_commit.message, '#nodep') }}
    permissions:
      contents: read
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Find and Replace"
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "STACK_NAME"
          replace: ${{ env.STACK_NAME }}
          include: ${{ env.COMPOSE_FILE}}
          regex: false

      - name: "Debug"
        run: |
          env
          cat ${{ env.COMPOSE_FILE}}

      - name: "Checkout Service Configs"
        uses: actions/checkout@v4
        with:
          repository: "hosted-domains/service-configs"
          ssh-key: ${{ secrets.SERVICE_CONFIGS_KEY }}
          ref: master
          path: ${{ env.CONFIGS_DIR }}
          sparse-checkout: |
            ${{ env.CONFIG_FILE }}
          sparse-checkout-cone-mode: false

      - name: "Update Environment"
        run: |
          echo "VERSION=${{ env.GITHUB_REF_NAME }}" | tee -a "${{ env.CONFIGS_DIR }}/${{ env.CONFIG_FILE }}"

      - name: "Parse Environment"
        id: parse
        uses: cssnr/env-json-action@master
        with:
          source: ${{ env.CONFIGS_DIR }}/${{ env.CONFIG_FILE }}

      - name: "Portainer Deploy"
        uses: cssnr/portainer-stack-deploy-action@v1
        with:
          url: ${{ secrets.PORTAINER_URL }}
          token: ${{ secrets.PORTAINER_TOKEN }}
          file: ${{ env.COMPOSE_FILE}}
          name: ${{ env.STACK_NAME}}
          type: file
          env_json: "${{ steps.parse.outputs.result }}"

  cleanup:
    name: "Cleanup"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: deploy
    if: ${{ !contains(github.event.head_commit.message, '#noclean') }}
    steps:
      - name: "Purge Cache"
        uses: cssnr/cloudflare-purge-cache-action@v1
        with:
          token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          domains: cssnr.com
