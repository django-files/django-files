---
kind: pipeline
name: "Deploy"

platform:
  arch: arm64

trigger:
  event:
    - push
    - promote

environment:
  REGISTRY_GROUP: shane
  REGISTRY_HOST: registry.hosted-domains.com
  COMPOSE_FILE: docker-compose-swarm.yaml
  CONFIG_FILE: settings.env
  SERVICE_CONFIGS: git@github.com:hosted-domains/service-configs.git
  CONFIGS_DIR: service-configs

volumes:
  - name: docker
    host:
      path: /var/run/docker.sock

steps:
  - name: "Flake8"
    image: alpine/flake8
    commands:
      - flake8 .

  - name: "Variables"
    image: alpine
    commands:
      - echo DRONE_DEPLOY_TO $${DRONE_DEPLOY_TO}
      - echo DRONE_SOURCE_BRANCH $${DRONE_SOURCE_BRANCH\/\\/\/\-}
      - if [ -n "$${DRONE_DEPLOY_TO}" ];then
      -   export ENV_NAMES=$${DRONE_DEPLOY_TO}
      - else
      -   export ENV_NAMES='dev,dev3'
      - fi
      - echo ENV_NAMES $${ENV_NAMES}
      - echo "ENV_NAMES='$${ENV_NAMES}'" >> ./.environment
      - cat ./.environment

  - name: "Service Configs"
    image: alpine/git
    environment:
      SERVICE_CONFIGS_KEY:
        from_secret: SERVICE_CONFIGS_KEY
    commands:
      - set -a; . ./.environment
      - echo "$${SERVICE_CONFIGS_KEY}" > ./.ssh_key
      - chmod 0600 ./.ssh_key
      - mkdir $${CONFIGS_DIR}
      - cd $${CONFIGS_DIR}
      - git init
      - git config core.sshCommand "ssh -i ../.ssh_key -o IdentitiesOnly=yes -o StrictHostKeyChecking=no"
      - git remote add origin $${SERVICE_CONFIGS}
      - git config core.sparseCheckout true
      - IFS=','
      - for ENV_NAME in $${ENV_NAMES}; do
      -   echo "services/$${DRONE_REPO_OWNER}/$${DRONE_REPO_NAME}/$${ENV_NAME}/$${CONFIG_FILE}"
      -   echo "services/$${DRONE_REPO_OWNER}/$${DRONE_REPO_NAME}/$${ENV_NAME}/$${CONFIG_FILE}" >> .git/info/sparse-checkout
      - done
      - git pull origin master

  - name: "Update Compose"
    image: alpine
    commands:
      - set -a; . ./.environment
      - IFS=','
      - for ENV_NAME in $${ENV_NAMES}; do
      -   export STACK_NAME="$${ENV_NAME}_$${DRONE_REPO_OWNER}_$${DRONE_REPO_NAME}"
      -   echo STACK_NAME $${STACK_NAME}
      -   cp -f $${{COMPOSE_FILE}} docker-compose-deploy-$${ENV_NAME}.yaml
      -   sed -i "s/STACK_NAME/$${STACK_NAME}/g" docker-compose-deploy-$${ENV_NAME}.yaml
      -   cat docker-compose-deploy-$${ENV_NAME}.yaml
      - done

  - name: "Build and Deploy"
    image: docker:dind
    volumes:
      - name: docker
        path: /var/run/docker.sock
    environment:
      REGISTRY_USER:
        from_secret: REGISTRY_USER
      REGISTRY_PASS:
        from_secret: REGISTRY_PASS
    commands:
      - set -a; . ./.environment
      - docker login --username "$${REGISTRY_USER}" --password "$${REGISTRY_PASS}" $${REGISTRY_HOST}
      - echo ENV_NAMES $${ENV_NAMES}
      - IFS=','
      - for ENV_NAME in $${ENV_NAMES}; do
      -   echo ENV_NAME $${ENV_NAME}
      -   set -a; . $${ENV_FILE}
      -   echo TRAEFIK_HOST $${TRAEFIK_HOST}
      -   export VERSION="$${ENV_NAME}"
      -   echo VERSION $${VERSION}
      -   export STACK_NAME="$${ENV_NAME}_$${DRONE_REPO_OWNER}_$${DRONE_REPO_NAME}"
      -   echo STACK_NAME $${STACK_NAME}
      -   export ENV_FILE="$${CONFIGS_DIR}/services/$${DRONE_REPO_OWNER}/$${DRONE_REPO_NAME}/$${ENV_NAME}/$${CONFIG_FILE}"
      -   echo ENV_FILE $${ENV_FILE}
      -   stat $${ENV_FILE}
      -   export STACK_COMPOSE="docker-compose-deploy-$${ENV_NAME}.yaml"
      -   echo STACK_COMPOSE $${STACK_COMPOSE}
      -   #docker compose -f $${STACK_COMPOSE} build --force-rm
      -   #docker compose -f $${STACK_COMPOSE} push
      -   #docker stack deploy -c $${STACK_COMPOSE} --with-registry-auth --resolve-image always $${STACK_NAME}
      - done
